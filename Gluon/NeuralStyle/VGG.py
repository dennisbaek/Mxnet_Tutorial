import mxnet.gluon as gluonimport mxnet as mx#pretrained modelclass VGG(gluon.HybridBlock):    def __init__(self, layers, filters, select , batch_norm=False, classes=1000 , **kwargs):        super(VGG, self).__init__(**kwargs)        self.select = select        with self.name_scope():            self.features = self._make_features(layers, filters, batch_norm)            self.classifier = gluon.nn.HybridSequential(prefix='')            self.classifier.add(gluon.nn.Dense(4096, activation='relu',                                         weight_initializer='normal',                                         bias_initializer='zeros'))            self.classifier.add(gluon.nn.Dropout(rate=0.5))            self.classifier.add(gluon.nn.Dense(4096, activation='relu',                                         weight_initializer='normal',                                         bias_initializer='zeros'))            self.classifier.add(gluon.nn.Dropout(rate=0.5))            self.classifier.add(gluon.nn.Dense(classes,                                         weight_initializer='normal',                                         bias_initializer='zeros'))    def _make_features(self, layers, filters, batch_norm):        featurizer = gluon.nn.HybridSequential(prefix='')        for i, num in enumerate(layers):            for _ in range(num):                featurizer.add(gluon.nn.Conv2D(filters[i], kernel_size=3, padding=1,                                        weight_initializer=mx.init.Xavier(rnd_type='gaussian',                                                                   factor_type='out',                                                                   magnitude=2),                                         bias_initializer='zeros'))                if batch_norm:                    featurizer.add(gluon.nn.BatchNorm())                featurizer.add(gluon.nn.Activation('relu'))            featurizer.add(gluon.nn.AvgPool2D(strides=2)) # replacing the max-pooling operation by average poolings        return featurizer    def hybrid_forward(self, F, x):        featurizer = []        for i, layer in enumerate(self.features):            x = layer(x)            if i in self.select: # layer select!!!                featurizer.append(x)        return featurizerdef get_vgg(select= None , num_layers = None , pretrained=True , batch_norm=None , ctx=mx.cpu(), root='~/.mxnet/models', **kwargs):    vgg_spec = {11: ([1, 1, 2, 2, 2], [64, 128, 256, 512, 512]),                13: ([2, 2, 2, 2, 2], [64, 128, 256, 512, 512]),                16: ([2, 2, 3, 3, 3], [64, 128, 256, 512, 512]),                19: ([2, 2, 4, 4, 4], [64, 128, 256, 512, 512])}    layers, filters = vgg_spec[num_layers]    net = VGG(layers, filters, select, batch_norm, **kwargs)    if pretrained:        batch_norm_suffix = '_bn' if kwargs.get('batch_norm') else ''        net.load_params(gluon.model_zoo.model_store.get_model_file('vgg%d%s'%(num_layers, batch_norm_suffix),root=root), ctx=ctx)    return net